syntax = "proto3";

package app;

/********************* AppService Entities *********************/

/*
 * App service exposing RPC call to get the initial Jukebox state
 */
service AppService {

  /* 
   * Given Spotify Authentication information, returns an initial
   * JukeboxState object, containing seed tracks and default parameters
   */
  rpc GetInitialJukeboxState(AuthCreds) returns (JukeboxState) {}
  
  /*
   * Registers the user with given Spotify Auth info in Jukebox database.
   * Returns the complete AuthCreds object.
   */
  rpc RegisterUser(AuthCreds) returns (AuthCreds) {}

  /*
   * Given user-tuned JukeboxState, returns final version of
   * the Jukebox object
   */
  rpc GenerateJukebox(JukeboxState) returns (Jukebox) {}

  /*
   * Given user-tuned JukeboxState, returns final version of
   * the Jukebox object
   */
  rpc GetPlaylistUri(GetPlaylistUriRequest) returns (GetPlaylistUriResponse) {}
}

/*
 * Spotify auth credentials needed for privileged API calls 
 */ 
message AuthCreds {
  string accessToken = 1;
  string userId = 2;
}

/*
 * Describes the state of a Jukebox instance
 */
message JukeboxState {
  repeated SeedTrack seedTracks = 1;
  AudioFeatureParams audioFeatureParams = 2; 
  string accessToken = 3;
  string userId = 4;
}

/*
 * Represents a single potential seed track 
 */
message SeedTrack {
  string uri = 1;
  string name = 2;
  string artist = 3;
  string album = 4;
  string image = 5;
}

/*
 * Represents the audio feature parameters
 */
message AudioFeatureParams {
  float acousticness = 1;
  float danceability = 2;
  float energy = 3;
  float tempo = 4;
  float valence = 5; 
}

/*
 * Describes a final Jukebox instance
 */
message Jukebox {
  string playlistUri = 1;
  int32 playlistId = 2;
  string accessToken = 3;
}

message GetPlaylistUriRequest {
  int32 playlistId = 1;
}

message GetPlaylistUriResponse {
  string playlistUri = 2;
}

/********************* HandshakeService Entities *********************/

service HandshakeService {
  rpc Shake(HandshakeRequest) returns (HandshakeResponse) {}
}

message HandshakeRequest {
  string name = 1;
}

message HandshakeResponse {
  string message = 1;
}
